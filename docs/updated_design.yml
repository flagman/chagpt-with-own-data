
- class: ChatGPTProcessor
  description: Feeds the crafted prompt to ChatGPT and obtains the generated answer
  properties:
    - name: model
      type: str
      description: The name of the ChatGPT model to be used
    - name: api_key
      type: str
      description: The API key to access the OpenAI API
  methods:
    - name: __init__
      description: Initializes the ChatGPTProcessor with the provided API key and model name
      input: str, str
    - name: get_response
      description: Send the prompt to ChatGPT and get the response
      input: str
      output: str
- class: DataSource
  description: Base class for data sources that downloads data and converts it to text
  properties:
    - name: source
      type: str
      description: The source of the data
  methods:
    - name: __init__
      description: Initializes the DataSource with the provided source
      input: str
    - name: fetch_data
      description: Download data from the source and convert it to text
      output: str

- class: PDFDataSource
  description: Downloads data from a PDF file URL and converts it to text
  inherits: DataSource
  methods:
    - name: __init__
      description: Initializes the PDFDataSource with the provided source, inheriting from DataSource
      input: str
    - name: fetch_data
      description: Download data from a PDF file URL and convert it to text
      output: str
- class: EmbeddingGenerator
  description: Computes embeddings for each document or text passage in the corpus using OpenAI API
  properties:
    - name: api_key
      type: str
      description: The API key to access the OpenAI API
    - name: chunk_size
      type: int
      description: The size of the text chunks to be processed for generating embeddings
  methods:
    - name: __init__
      description: Initializes the EmbeddingGenerator with the provided API key and chunk_size
      input: str, int
    - name: generate_embeddings
      description: Generate embeddings for the input text by splitting it into chunks and processing each chunk
      input: str
      output: List[Tuple[str, List[float]]]
- class: Preprocessor
  description: Cleans and preprocesses the corpus of data to ensure consistency and remove irrelevant information
  methods:
    - name: preprocess
      description: Preprocess the input text by removing extra whitespaces, converting characters to lowercase, and removing stopwords
      input: str
      output: str
- class: PromptGenerator
  description: Combines user prompt with relevant text passages to generate ChatGPT prompt
  methods:
    - name: generate_prompt
      description: Generate a ChatGPT prompt using the found chunks and user query
      input: str, List[str]
      output: str
- class: VectorDatabaseStorage
  description: Stores the generated embeddings in a vector database, allowing for efficient similarity searches
  properties:
    - name: database
      type: Dict[str, List[float]]
      description: A dictionary to store the text and its corresponding embedding
  methods:
    - name: __init__
      description: Initializes the VectorDatabaseStorage
    - name: store
      description: Store the input text and its corresponding embedding
      input: str, List[float]
    - name: query_similar_texts
      description: Retrieve the most similar texts to the input query using the embeddings
      input: List[float], int
      output: List[str]
